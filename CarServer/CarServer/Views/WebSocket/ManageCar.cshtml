@model List<CarServer.Models.Car>

@{
    ViewData["Title"] = "ManageCar";
}

<link rel="stylesheet" href="~/css/web-socket.css" />

<div id="car-control-container">
    <div class="wrapper"></div>

    <button class="btn-prev" disabled>&#10094;</button>
    <button class="btn-next">&#10095;</button>
</div>

<script>
    const wrapper = document.querySelector('.wrapper');
    const prevBtn = document.querySelector('.btn-prev');
    const nextBtn = document.querySelector('.btn-next');

    let currentIndex = 0;
    let carControlBoxPerPage = 2;

    function updateButtons() {
        if (wrapper.children.length == 0) {
            prevBtn.style.visibility = "hidden"
            nextBtn.style.visibility = "hidden";
        }
        else {
            prevBtn.style.visibility = "visible"
            nextBtn.style.visibility = "visible";
        }
        prevBtn.disabled = currentIndex === 0;
        nextBtn.disabled = currentIndex >= document.querySelectorAll('.car-control-box').length - carControlBoxPerPage;
    }

    function updateCarControlBoxPerPage() {
        if (window.innerWidth <= 768)
            carControlBoxPerPage = 1;
        else
            carControlBoxPerPage = 2;
        updateButtons();
    }

    nextBtn.addEventListener('click', () => {
        const totalBoxes = document.querySelectorAll('.car-control-box').length;
        const boxWidth = (document.getElementById("car-control-container").offsetWidth / carControlBoxPerPage);
        if (currentIndex < totalBoxes - carControlBoxPerPage) {
            currentIndex++;
            wrapper.style.transform = `translateX(-${currentIndex * boxWidth}px)`;
        }
        updateButtons();
    });

    prevBtn.addEventListener('click', () => {
        if (currentIndex > 0) {
            const boxWidth = (document.getElementById("car-control-container").offsetWidth / carControlBoxPerPage);
            currentIndex--;
            wrapper.style.transform = `translateX(-${currentIndex * boxWidth}px)`;
        }
        updateButtons();
    });

    window.addEventListener("resize", updateCarControlBoxPerPage);

    updateButtons();
    updateCarControlBoxPerPage();
</script>

<script>
    const mainWebSocket = new WebSocket(`ws://${document.location.host}/WebSocket/MainGuestWebSocket`)
    mainWebSocket.binaryType = "arraybuffer"
    mainWebSocket.onopen = () => {
        console.log("Connected to WebSocket");
    };

    mainWebSocket.onmessage = (event) => {
        if (typeof event.data === "string") {
            if (event.data.startsWith("RequireConnectToWebSocket:")) {
                let guidCar = event.data.split(": ")[1];
                openCarWebSocket(guidCar);
            }
            else if (event.data.startsWith("Esp32ControlClosed:")) {
                let guid = event.data.split(": ")[1];
                alert(`Esp32ControlClosed: ${guid}`);
            }
            else if (event.data.startsWith("Esp32CameraClosed:")) {
                let guid = event.data.split(": ")[1];
                alert(`Esp32CameraClosed: ${guid}`);
            }
        }
    };

    function openCarWebSocket(guidCar) {
        const url = `ws://${document.location.host}/WebSocket/GuestWebSocket?guidCar=${guidCar}`;
        let ws = new WebSocket(url);
        const html = `
        <div class="car-control-box" id="car-control-box-${guidCar}">
            <div>
            <div class="car-temperature-humidity">
                <div>
                    <p id="car-name-${guidCar}"></p>
                </div>
            </div>
            <div class="car-temperature-humidity">
                <div>
                    <div class="temperature-icon temperature-icon-color p-3"></div>
                    <p id="temperature-${guidCar}"></p>
                </div>

                <div>
                    <div class="humidity-icon humidity-icon-color p-3"></div>
                    <p id="humidity-${guidCar}"></p>
                </div>
            </div>

            <div class="video-frame">
                <img id="video-${guidCar}" />
                <div class="video-frame-overlay" id="video-frame-overlay-${guidCar}">
                    <p>Esp32 Camera mất kết nối</p>
                    <div>
                        <button id="btn-reconnect-to-esp32-camera-${guidCar}">Kết nối lại?</button>
                        <button id="btn-close-reconnect-to-esp32-camera-${guidCar}">Đóng</button>
                    </div>
                </div>
            </div>

            <div class="car-control-btn-group">
                <div>
                    <button class="btn-forward" id="btn-forward-${guidCar}">
                        <div class="arrow-down-icon arrow-down-icon-color p-4"></div>
                    </button>
                </div>
                <div>
                    <button class="btn-turn-left" id="btn-turn-left-${guidCar}">
                        <div class="arrow-down-icon arrow-down-icon-color p-4"></div>
                    </button>

                    <button class="btn-brake" id="btn-brake-${guidCar}">
                        <div class="circle-icon circle-icon-color p-4"></div>
                    </button>

                    <button class="btn-turn-right" id="btn-turn-right-${guidCar}">
                        <div class="arrow-down-icon arrow-down-icon-color p-4"></div>
                    </button>
                </div>
                <div>
                    <button class="btn-backward" id="btn-backward-${guidCar}">
                        <div class="arrow-down-icon arrow-down-icon-color p-4"></div>
                    </button>
                </div>

                <div class="car-control-btn-group-overlay" id="car-control-btn-group-overlay-${guidCar}">
                    <p>Esp32 Control mất kết nối</p>
                    <div>
                        <button id="btn-reconnect-to-esp32-control-${guidCar}">Kết nối lại?</button>
                        <button id="btn-close-reconnect-to-esp32-control-${guidCar}">Đóng</button>
                    </div>
                </div>
            </div>

            <div class="car-control-command">
                <button id="btn-led-${guidCar}">
                    <div class="head-line-on-icon head-line-icon-color p-3" />
                </button>

                <button id="btn-recording-${guidCar}">
                    <div class="stream-icon stream-icon-color p-3"></div>
                </button>

                <button id="btn-screenshot-${guidCar}">
                    <div class="screen-shot-icon screen-shot-icon-color p-3"></div>
                </button>
            </div>
        </div>
    </div>`;

        wrapper.insertAdjacentHTML("beforeend", html);
        updateButtons();

        const carControlBoxElement = document.getElementById(`car-control-box-${guidCar}`);
        const temperature = document.getElementById(`temperature-${guidCar}`)
        const humidity = document.getElementById(`humidity-${guidCar}`)
        const video = document.getElementById(`video-${guidCar}`);

        const btnForward = document.getElementById(`btn-forward-${guidCar}`);
        const btnBackward = document.getElementById(`btn-backward-${guidCar}`);
        const btnTurnLeft = document.getElementById(`btn-turn-left-${guidCar}`);
        const btnTurnRight = document.getElementById(`btn-turn-right-${guidCar}`);
        const btnBrake = document.getElementById(`btn-brake-${guidCar}`);

        const btnLed = document.getElementById(`btn-led-${guidCar}`);
        const btnRecording = document.getElementById(`btn-recording-${guidCar}`);
        const btnScreenshot = document.getElementById(`btn-screenshot-${guidCar}`);

        const overlayControl = document.getElementById(`car-control-btn-group-overlay-${guidCar}`);
        const overlayCamera = document.getElementById(`video-frame-overlay-${guidCar}`);

        const btnReconnectToEsp32Camera = document.getElementById(`btn-reconnect-to-esp32-camera-${guidCar}`);
        const btnCloseReconnectToEsp32Camera = document.getElementById(`btn-close-reconnect-to-esp32-camera-${guidCar}`);

        const btnReconnectToEsp32Control = document.getElementById(`btn-reconnect-to-esp32-control-${guidCar}`);
        const btnCloseReconnectToEsp32Control = document.getElementById(`btn-close-reconnect-to-esp32-control-${guidCar}`);

        let lastPingTimeOfEsp32Control = performance.now();
        let lastPingTimeOfEsp32Camera = performance.now();
        let hashCode;

        ws.onopen = () => {
            const checkPingFromEsp32ControlInterval = setInterval(() => {
                if (performance.now() - lastPingTimeOfEsp32Control >= 5000) {
                    overlayControl.style.display = "flex";
                }
            }, 3000)

            const checkPingFromEsp32CameralInterval = setInterval(() => {
                if (performance.now() - lastPingTimeOfEsp32Camera >= 5000) {
                    overlayCamera.style.display = "flex";
                }
            }, 3000)

            const pingInterval = setInterval(() => {
                if (ws.readyState === WebSocket.CLOSED || ws.readyState === WebSocket.CLOSING || ws.readyState === WebSocket.CONNECTING)
                    clearInterval(pingInterval);

                else {
                    let pingText = "ping";
                    ws.send(pingText);
                }
            }, 3000);
        };

        ws.onclose = () => {
            console.log(`WebSocket for Car ${guidCar} close.`);
            carControlBoxElement.remove();
            updateButtons();
        };

        ws.onmessage = async (event) => {
            if (typeof event.data === "string") {
                try {
                    const jsonData = JSON.parse(event.data);
                    temperature.innerText = `${jsonData.temperature}℃`;
                    humidity.innerText = `${jsonData.humidity}%`;
                }
                catch {
                    if (event.data === "ScreenshotTaken") {
                        alert("screenshot success!");
                    }
                    else if (event.data === "Esp32ControlClosed") {
                        alert("Esp32Control connection lost!");
                    }
                    else if (event.data === "Esp32CameraClosed") {
                        alert("Esp32Camera connection lost!");
                    }
                    else if (event.data === "PingFromEsp32Control") {
                        lastPingTimeOfEsp32Control = performance.now();
                    }

                    else if (event.data.startsWith("HashCode:")) {
                        hashCode = event.data.split(": ")[1];
                    }
                }
            }
            else if (event.data instanceof Blob) {
                const buffer = await event.data.slice(0, 4).arrayBuffer(); // Read first 4 bytes
                const uint8 = new Uint8Array(buffer);

                // JPEG
                if (uint8[0] === 0xFF && uint8[1] === 0xD8 && uint8[2] === 0xFF) {
                    const imgUrl = URL.createObjectURL(event.data);
                    video.src = imgUrl;
                }
                else {
                    const text = await event.data.text();
                    if (text === "PingFromEsp32Camera") {
                        lastPingTimeOfEsp32Camera = performance.now();
                    }
                }
            }
        };

        fetch(`${document.location.origin}/Car/GetCarById?carId=${guidCar}`,
                {
                    method: 'GET'
                })
                .then(response => response.json())
                .then(json => {
                    document.getElementById(`car-name-${guidCar}`).innerText = json.name;
                })


        btnForward.addEventListener("touchstart", (e) => ws.send("forward"));
        btnForward.addEventListener("touchend", (e) => ws.send("brake"));
        btnForward.addEventListener("mousedown", (e) => ws.send("forward"));
        btnForward.addEventListener("mouseup", (e) => ws.send("brake"));

        btnBackward.addEventListener("touchstart", (e) => ws.send("backward"));
        btnBackward.addEventListener("touchend", (e) => ws.send("brake"));
        btnBackward.addEventListener("mousedown", (e) => ws.send("backward"));
        btnBackward.addEventListener("mouseup", (e) => ws.send("brake"));

        btnTurnLeft.addEventListener("touchstart", (e) => ws.send("turnleft"));
        btnTurnLeft.addEventListener("touchend", (e) => ws.send("brake"));
        btnTurnLeft.addEventListener("mousedown", (e) => ws.send("turnleft"));
        btnTurnLeft.addEventListener("mouseup", (e) => ws.send("brake"));

        btnTurnRight.addEventListener("touchstart", (e) => ws.send("turnright"));
        btnTurnRight.addEventListener("touchend", (e) => ws.send("brake"));
        btnTurnRight.addEventListener("mousedown", (e) => ws.send("turnright"));
        btnTurnRight.addEventListener("mouseup", (e) => ws.send("brake"));

        btnBrake.addEventListener("click", (e) => ws.send("brake"));

        btnLed.addEventListener("click", (e) => {
            const icon = e.currentTarget.children[0];

            if (icon.classList.contains("head-line-on-icon")) {
                ws.send("ledon");
                icon.classList.remove("head-line-on-icon");
                icon.classList.add("head-line-off-icon");
            }
            else if (icon.classList.contains("head-line-off-icon")) {
                ws.send("ledoff");
                icon.classList.remove("head-line-off-icon");
                icon.classList.add("head-line-on-icon");
            }
        });

        btnRecording.addEventListener("click", (e) => {
            const icon = e.currentTarget.children[0];

            if (icon.classList.contains("stream-icon")) {
                ws.send("recording");
                icon.classList.remove("stream-icon");
                icon.classList.add("dot-icon");
            }
            else if (icon.classList.contains("dot-icon")) {
                ws.send("stoprecording");
                icon.classList.remove("dot-icon");
                icon.classList.add("stream-icon");
            }
        });

        btnScreenshot.addEventListener("click", (e) => {
            let btn = e.currentTarget;
            if (!btn.disabled)
                ws.send(`screenshot`);

            let children = btn.querySelectorAll(`*`);
            children[0].style.cursor = `not-allowed`;
            btn.disabled = true;
            btn.style.cursor = `not-allowed`;

            setTimeout(() => {
                btn.disabled = false;
                btn.style.cursor = `pointer`;
                children[0].style.cursor = `pointer`;
            }, 1000);
        });

        btnReconnectToEsp32Control.addEventListener("click", async (e) => {
            fetch(`${document.location.origin}/WebSocket/ReconnectToEsp32Control?guidCar=${guidCar}`,
                {
                    method: 'GET'
                });

            mainWebSocket.send(`Reconnect: ${hashCode} - ${guidCar}`);
            overlayControl.style.display = "none";
            lastPingTimeOfEsp32Control = performance.now();
        });

        btnReconnectToEsp32Camera.addEventListener("click", async (e) => {
            fetch(`${document.location.origin}/WebSocket/ReconnectToEsp32Camera?guidCar=${guidCar}`,
                {
                    method: 'GET'
                });
            mainWebSocket.send(`Reconnect: ${hashCode} - ${guidCar}`);
            overlayCamera.style.display = "none";
            lastPingTimeOfEsp32Camera = performance.now();
        });

        btnCloseReconnectToEsp32Control.addEventListener("click", (e) => {
            overlayControl.style.display = "none";
            lastPingTimeOfEsp32Control = performance.now();
        });

        btnCloseReconnectToEsp32Camera.addEventListener("click", (e) => {
            overlayCamera.style.display = "none";
            lastPingTimeOfEsp32Camera = performance.now();
        });
    }
</script>