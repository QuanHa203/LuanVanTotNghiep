@model Tuple<int, CarServer.Models.Car>

<script>
    const urlWebSocket@(Model.Item1) = `ws://192.168.1.100:1234/WebSocket/RequireConnectToCar?guid=@(Model.Item2.Id)`;
    let webSocketClient@(Model.Item1) = new WebSocket(urlWebSocket@(Model.Item1));
</script>

<div class="car-control-box">
    <div class="car-temperature-humidity">
        <div>
            <div class="temperature-icon temperature-icon-color p-3"></div>
            <p id="temperature-@Model.Item1"></p>
        </div>

        <div>
            <div class="humidity-icon humidity-icon-color p-3"></div>
            <p id="humidity-@Model.Item1"></p>
        </div>
    </div>

    <div class="video-frame">
        <img id="video-@Model.Item1" />
    </div>

    <div class="car-control-btn-group">
        <div>
            <button ontouchstart="webSocketClient@(Model.Item1).send(`forward`)" class="btn-forward"
                    ontouchend="webSocketClient@(Model.Item1).send(`brake`)"
                    onmousedown="webSocketClient@(Model.Item1).send(`forward`)"
                    onmouseup="webSocketClient@(Model.Item1).send(`brake`)">

                <div class="arrow-down-icon arrow-down-icon-color p-4"></div>
            </button>
        </div>
        <div>
            <button ontouchstart="webSocketClient@(Model.Item1).send(`turnleft`)" class="btn-turn-left"
                    ontouchend="webSocketClient@(Model.Item1).send(`brake`)"
                    onmousedown="webSocketClient@(Model.Item1).send(`turnleft`)"
                    onmouseup="webSocketClient@(Model.Item1).send(`brake`)">

                <div class="arrow-down-icon arrow-down-icon-color p-4"></div>
            </button>

            <button class="btn-brake" onclick="webSocketClient@(Model.Item1).send(`brake`)">
                <div class="circle-icon circle-icon-color p-4"></div>
            </button>

            <button ontouchstart="webSocketClient@(Model.Item1).send(`turnright`)" class="btn-turn-right"
                    ontouchend="webSocketClient@(Model.Item1).send(`brake`)"
                    onmousedown="webSocketClient@(Model.Item1).send(`turnright`)"
                    onmouseup="webSocketClient@(Model.Item1).send(`brake`)">

                <div class="arrow-down-icon arrow-down-icon-color p-4"></div>
            </button>
        </div>
        <div>
            <button ontouchstart="webSocketClient@(Model.Item1).send(`backward`)" class="btn-backward"
                    ontouchend="webSocketClient@(Model.Item1).send(`brake`)"
                    onmousedown="webSocketClient@(Model.Item1).send(`backward`)"
                    onmouseup="webSocketClient@(Model.Item1).send(`brake`)">

                <div class="arrow-down-icon arrow-down-icon-color p-4"></div>
            </button>
        </div>
    </div>

    <div class="car-control-command">
        <button onclick="sendLedStatus(webSocketClient@(Model.Item1))">
            <div class="head-line-on-icon head-line-icon-color p-3" />
        </button>

        <button onclick="sendRecordingStatus(webSocketClient@(Model.Item1))">
            <div class="stream-icon stream-icon-color p-3"></div>
        </button>

        <button onclick="sendScreenshot(webSocketClient@(Model.Item1))">
            <div class="screen-shot-icon screen-shot-icon-color p-3"></div>
        </button>
    </div>
</div>

<script>
    webSocketClient@(Model.Item1).onopen = () => {
        console.log("Connected to WebSocket");

        setInterval(() => {
            let pingText = "ping";
            let encoder = new TextEncoder();
            let binaryData = encoder.encode(pingText);

            webSocketClient@(Model.Item1).send(binaryData);
        }, 5000);
    };

    webSocketClient@(Model.Item1).onmessage = (event) => {
        if (typeof event.data === "string") {
            if(event.data === "screenshot taken") {
                // alert("screenshot success!");
            }
            else if(event.data === "Esp32ControlClosed") {
                alert("Esp32Control connection lost!");
            }
            else if(event.data === "Esp32CameraClosed") {
                alert("Esp32Camera connection lost!");
            }
            else {
                const jsonData = JSON.parse(event.data);
                document.getElementById("temperature-@(Model.Item1)").innerText  = `${jsonData.temperature}℃`;
                document.getElementById("humidity-@Model.Item1").innerText  = `${jsonData.humidity}%`;
            }
        }
        else if (event.data instanceof Blob) {
            const imgUrl = URL.createObjectURL(event.data);
            document.getElementById("video-@Model.Item1").src = imgUrl;
        }
    };
</script>